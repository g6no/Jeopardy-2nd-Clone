{"ast":null,"code":"var _jsxFileName = \"/Users/alqattan/Downloads/Jeopardy-Clone-main/src/Questions.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport cats from \"./cats.js\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Card(_ref) {\n  _s();\n  let {\n    points,\n    id,\n    handleClick,\n    data\n  } = _ref;\n  let initStyle = \"cardy-questions\";\n  let clickedStyle = \"cardy-questions-clicked\";\n  const timesClicked = useRef(0);\n  const isClicked = id === data.id;\n\n  // Update the initial style based on whether the card has been clicked or is the double points card\n  initStyle = isClicked || data.double_points && data.id === id ? clickedStyle : initStyle;\n  const nestedHandleClick = e => {\n    timesClicked.current++;\n    handleClick(e); // Pass the click event back to the parent component\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: id,\n      className: initStyle,\n      onClick: nestedHandleClick,\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-points\",\n        children: points\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n_s(Card, \"Ppfn6zJTeAN65DGGjhYQ35HSaS0=\");\n_c = Card;\nfunction QuestionScreen(_ref2) {\n  let {\n    question,\n    answers,\n    handleClick,\n    double_points\n  } = _ref2;\n  const screenStyle = double_points ? \"double-question-screen\" : \"question-screen\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: screenStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"question\",\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"answers\",\n      children: answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        type: \"a\",\n        children: answer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-button\",\n      onClick: handleClick,\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n_c2 = QuestionScreen;\nexport default function Questions() {\n  _s2();\n  const [data, setData] = useState({\n    question: null,\n    answers: null,\n    id: null,\n    double_points: false\n  });\n  const [loaded, setLoaded] = useState(false); // New state to control the loading of a random question\n  const allData = cats.flat();\n  const loadRandomQuestion = () => {\n    const randomIndex = Math.floor(Math.random() * allData.length);\n    const newData = {\n      ...allData[randomIndex],\n      double_points: true\n    };\n    setData(newData);\n    setLoaded(true); // Indicate that a question has been loaded\n  };\n\n  useEffect(() => {\n    const randomIndex = Math.floor(Math.random() * allData.length);\n    console.log(allData[randomIndex]);\n    const newData = {\n      ...allData[randomIndex],\n      double_points: true\n    };\n    // You may need to adjust this line if newData structure doesn't directly fit\n    setData(newData);\n  }, []);\n  function handleQuesClick(event) {\n    const id = parseInt(event.currentTarget.id, 10); // Ensure id is a number\n    const selectedCard = allData.find(card => card.id === id);\n    if (selectedCard) {\n      setData({\n        ...selectedCard,\n        double_points: selectedCard.double_points || false\n      });\n    }\n  }\n  function handleQuesClick(event) {\n    const id = parseInt(event.currentTarget.id, 10); // Ensure id is a number\n    const selectedCard = allData.find(card => card.id === id);\n    if (selectedCard) {\n      setData({\n        ...selectedCard,\n        double_points: selectedCard.double_points || false\n      });\n    }\n  }\n  const catMap = cats.map((cat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ques\",\n    children: cat.map(card => /*#__PURE__*/_jsxDEV(Card, {\n      points: card.points,\n      id: card.id,\n      handleClick: handleQuesClick,\n      data: data\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this))\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ques-thingy\",\n      children: catMap\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), data.question && /*#__PURE__*/_jsxDEV(QuestionScreen, {\n      ...data,\n      handleClick: handleBackClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n_s2(Questions, \"kol0/FgdCgfR/AzmLOAQ6Q9EfHc=\");\n_c3 = Questions;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"QuestionScreen\");\n$RefreshReg$(_c3, \"Questions\");","map":{"version":3,"names":["cats","useState","useRef","useEffect","Card","points","id","handleClick","data","initStyle","clickedStyle","timesClicked","isClicked","double_points","nestedHandleClick","e","current","QuestionScreen","question","answers","screenStyle","map","answer","index","Questions","setData","loaded","setLoaded","allData","flat","loadRandomQuestion","randomIndex","Math","floor","random","length","newData","console","log","handleQuesClick","event","parseInt","currentTarget","selectedCard","find","card","catMap","cat","handleBackClick"],"sources":["/Users/alqattan/Downloads/Jeopardy-Clone-main/src/Questions.js"],"sourcesContent":["import cats from \"./cats.js\";\nimport { useState, useRef, useEffect } from \"react\";\n\nfunction Card({ points, id, handleClick, data }) {\n    let initStyle = \"cardy-questions\";\n    let clickedStyle = \"cardy-questions-clicked\";\n\n    const timesClicked = useRef(0);\n    const isClicked = id === data.id;\n\n    // Update the initial style based on whether the card has been clicked or is the double points card\n    initStyle = (isClicked || (data.double_points && data.id === id)) ? clickedStyle : initStyle;\n\n    const nestedHandleClick = (e) => {\n        timesClicked.current++;\n        handleClick(e); // Pass the click event back to the parent component\n    };\n\n    return (\n        <div>\n            <div id={id} className={initStyle} onClick={nestedHandleClick}>\n                <h5 className=\"card-points\">{points}</h5>\n            </div>\n        </div>\n    );\n}\n\nfunction QuestionScreen({ question, answers, handleClick, double_points }) {\n    const screenStyle = double_points ? \"double-question-screen\" : \"question-screen\";\n\n    return (\n        <div className={screenStyle}>\n            <h5 className=\"question\">{question}</h5>\n            <ol className=\"answers\">\n                {answers.map((answer, index) => (\n                    <li key={index} type=\"a\">{answer}</li>\n                ))}\n            </ol>\n            <button className=\"back-button\" onClick={handleClick}>Back</button>\n        </div>\n    );\n}\n\nexport default function Questions() {\n    const [data, setData] = useState({ question: null, answers: null, id: null, double_points: false });\n    const [loaded, setLoaded] = useState(false); // New state to control the loading of a random question\n    const allData = cats.flat();\n\n    const loadRandomQuestion = () => {\n        const randomIndex = Math.floor(Math.random() * allData.length);\n        const newData = { ...allData[randomIndex], double_points: true };\n        setData(newData);\n        setLoaded(true); // Indicate that a question has been loaded\n    };\n    \n    useEffect(() => {\n        const randomIndex = Math.floor(Math.random() * allData.length);\n        console.log(allData[randomIndex]);\n        const newData = { ...allData[randomIndex], double_points: true };\n        // You may need to adjust this line if newData structure doesn't directly fit\n        setData(newData);\n    }, []);\n\n    function handleQuesClick(event) {\n        const id = parseInt(event.currentTarget.id, 10); // Ensure id is a number\n        const selectedCard = allData.find(card => card.id === id);\n        if (selectedCard) {\n            setData({ ...selectedCard, double_points: selectedCard.double_points || false });\n        }\n    }\n\n    function handleQuesClick(event) {\n        const id = parseInt(event.currentTarget.id, 10); // Ensure id is a number\n        const selectedCard = allData.find(card => card.id === id);\n        if (selectedCard) {\n            setData({ ...selectedCard, double_points: selectedCard.double_points || false });\n        }\n    }\n\n\n    const catMap = cats.map((cat, index) => (\n        <div className=\"ques\" key={index}>\n            {cat.map(card => (\n                <Card\n                    key={card.id}\n                    points={card.points}\n                    id={card.id}\n                    handleClick={handleQuesClick}\n                    data={data}\n                />\n            ))}\n        </div>\n    ));\n\n    return (\n        <div className=\"questions\">\n            <div className=\"ques-thingy\">{catMap}</div>\n            {data.question && <QuestionScreen {...data} handleClick={handleBackClick} />}\n        </div>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}