{"ast":null,"code":"var _jsxFileName = \"/Users/alqattan/Downloads/Jeopardy-Clone-main/src/Questions.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport cats from \"./cats.js\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Card(props) {\n  _s();\n  let initStyle = \"cardy-questions\";\n  let clickedStyle = \"cardy-questions-clicked\";\n  const timesClicked = useRef(0);\n  if (timesClicked.current !== 0 || props.id - props.data.id === 0) {\n    initStyle = clickedStyle;\n  }\n  const nestedHandleClick = e => {\n    timesClicked.current++;\n    props.handleClick(e);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: props.id,\n      className: initStyle,\n      onClick: e => {\n        return nestedHandleClick(e);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-points\",\n        children: props.points\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n\n// function QuestionScreen(props) {\n//     console.log(\"Id: \" + props.id)\n//     console.log(\"Double Points: \" + props.double_points)\n//     return (\n//         <div className=\"question-screen\">\n//             <h5 className=\"question\">{props.question}</h5>\n//             {props.id -2 === 0 && <img src=\"../q2.png\" alt=\"\" className=\"question-img\"/>}\n//             <ol className=\"answers\">\n//                 {props.answers.map((answer) => <li type=\"a\">{answer}</li>)} \n//             </ol>\n//             <button className=\"back-button\" onClick={props.handleClick}>Back</button>\n//         </div>\n//     );\n// }\n_s(Card, \"Ppfn6zJTeAN65DGGjhYQ35HSaS0=\");\n_c = Card;\nexport default function Questions() {\n  _s2();\n  const [data, setData] = useState({\n    question: null,\n    answers: null,\n    id: null,\n    double_points: false\n  });\n  const allData = [];\n  cats.map(cat => cat.map(card => allData.push(card)));\n  useEffect(() => {\n    const randomIndex = Math.floor(Math.random() * allData.length);\n    console.log(randomIndex);\n    // Directly update double_points status within allData\n    allData[randomIndex].double_points = true;\n    // No need to create a new array or set state here if we're not displaying questions immediately\n  }, []);\n  function handleQuesClick(event) {\n    const id = parseInt(event.currentTarget.id, 10); // Ensure `id` is a number\n    const selectedCard = allData.find(card => card.id === id); // Find the clicked card by id\n    if (selectedCard) {\n      // Now `selectedCard.double_points` will accurately reflect the double points status\n      setData({\n        question: selectedCard.question,\n        answers: selectedCard.answers,\n        id: id,\n        double_points: selectedCard.double_points\n      });\n    }\n  }\n  function handleBackClick() {\n    setData({\n      question: null,\n      answers: null,\n      id: null\n    });\n  }\n  const catMap = cats.map(cat => {\n    const cardMap = cat.map(card => /*#__PURE__*/_jsxDEV(Card, {\n      points: card.points,\n      id: card.id,\n      handleClick: handleQuesClick,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 43\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ques\",\n      children: cardMap\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ques-thingy\",\n      children: catMap\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), data.id && /*#__PURE__*/_jsxDEV(QuestionScreen, {\n      question: data.question,\n      answers: data.answers,\n      handleClick: handleBackClick,\n      id: data.id,\n      double_points: data.double_points\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s2(Questions, \"fJYz5J3GeCNGMR7LyDHbmeMglHA=\");\n_c2 = Questions;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"Questions\");","map":{"version":3,"names":["cats","useState","useRef","useEffect","Card","props","initStyle","clickedStyle","timesClicked","current","id","data","nestedHandleClick","e","handleClick","points","Questions","setData","question","answers","double_points","allData","map","cat","card","push","randomIndex","Math","floor","random","length","console","log","handleQuesClick","event","parseInt","currentTarget","selectedCard","find","handleBackClick","catMap","cardMap"],"sources":["/Users/alqattan/Downloads/Jeopardy-Clone-main/src/Questions.js"],"sourcesContent":["import cats from \"./cats.js\";\nimport {useState ,useRef, useEffect} from \"react\";\n\n\nfunction Card(props) {   \n    let initStyle = \"cardy-questions\";\n    let clickedStyle = \"cardy-questions-clicked\";\n\n    const timesClicked = useRef(0)\n\n    if (timesClicked.current !== 0 || props.id-props.data.id === 0) {\n        initStyle = clickedStyle;\n    }\n\n    const nestedHandleClick = (e) => {\n        timesClicked.current++;\n        props.handleClick(e)\n    }\n    \n\n    return (\n        <div>\n            <div id={props.id} className= {initStyle}  onClick={e => {return nestedHandleClick(e)}}>\n                <h5 className=\"card-points\">{props.points}</h5>\n            </div>\n        </div>\n    );\n}\n\n// function QuestionScreen(props) {\n//     console.log(\"Id: \" + props.id)\n//     console.log(\"Double Points: \" + props.double_points)\n//     return (\n//         <div className=\"question-screen\">\n//             <h5 className=\"question\">{props.question}</h5>\n//             {props.id -2 === 0 && <img src=\"../q2.png\" alt=\"\" className=\"question-img\"/>}\n//             <ol className=\"answers\">\n//                 {props.answers.map((answer) => <li type=\"a\">{answer}</li>)} \n//             </ol>\n//             <button className=\"back-button\" onClick={props.handleClick}>Back</button>\n//         </div>\n//     );\n// }\n\n\nexport default function Questions() {\n    const [data, setData] = useState({question: null, answers: null ,id: null, double_points: false})\n    const allData = []\n    cats.map((cat) => cat.map((card) => allData.push(card)));\n\n    useEffect(() => {\n        const randomIndex = Math.floor(Math.random() * allData.length);\n        console.log(randomIndex);\n        // Directly update double_points status within allData\n        allData[randomIndex].double_points = true;\n        // No need to create a new array or set state here if we're not displaying questions immediately\n    }, []);\n\n    function handleQuesClick(event) {\n        const id = parseInt(event.currentTarget.id, 10); // Ensure `id` is a number\n        const selectedCard = allData.find(card => card.id === id); // Find the clicked card by id\n        if (selectedCard) {\n            // Now `selectedCard.double_points` will accurately reflect the double points status\n            setData({ \n                question: selectedCard.question, \n                answers: selectedCard.answers, \n                id: id, \n                double_points: selectedCard.double_points \n            });\n        }\n    }\n    \n    function handleBackClick() {\n        setData({question: null, answers: null ,id: null})\n    }\n\n    const catMap = cats.map((cat) => {\n        const cardMap = cat.map((card) => <Card points={card.points} id={card.id} handleClick={handleQuesClick} data={data}/>);\n        return (\n            <div className=\"ques\">\n                {cardMap}\n            </div>\n        );\n    })\n\n\n    return (\n    <div className=\"questions\">\n        <div className=\"ques-thingy\">\n            {catMap}\n        </div>\n        {data.id && <QuestionScreen question={data.question} answers={data.answers} handleClick={handleBackClick} id={data.id} double_points = {data.double_points}/>}\n    </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}