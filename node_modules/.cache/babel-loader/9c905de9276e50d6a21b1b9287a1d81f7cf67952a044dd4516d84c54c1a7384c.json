{"ast":null,"code":"var _jsxFileName = \"/Users/alqattan/Downloads/Jeopardy-Clone-main/src/Questions.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport cats from \"./cats.js\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Card(props) {\n  _s();\n  let initStyle = \"cardy-questions\";\n  let clickedStyle = \"cardy-questions-clicked\";\n  const timesClicked = useRef(0);\n  if (timesClicked.current !== 0 || props.id - props.data.id === 0) {\n    initStyle = clickedStyle;\n  }\n  const nestedHandleClick = e => {\n    timesClicked.current++;\n    props.handleClick(e);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: props.id,\n      className: initStyle,\n      onClick: nestedHandleClick,\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-points\",\n        children: props.points\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n_s(Card, \"Ppfn6zJTeAN65DGGjhYQ35HSaS0=\");\n_c = Card;\nfunction QuestionScreen(props) {\n  const screenStyle = props.double_points ? \"double-question-screen\" : \"question-screen\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: screenStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"question\",\n      children: props.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"answers\",\n      children: props.answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        type: \"a\",\n        children: answer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-button\",\n      onClick: props.handleClick,\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n// function QuestionScreen(props) {\n//     console.log(props.id);\n//     return (\n//         <div className=\"question-screen\">\n//             <h5 className=\"question\">{props.question}</h5>\n//             {/* {props.id -2 === 0 && <img src=\"../q2.png\" alt=\"\" className=\"question-img\"/>} */}\n//             <ol className=\"answers\">\n//                 {props.answers.map((answer) => <li type=\"a\">{answer}</li>)} \n//             </ol>\n//             <button className=\"back-button\" onClick={props.handleClick}>Back</button>\n//         </div>\n//     );\n// }\n_c2 = QuestionScreen;\nexport default function Questions() {\n  _s2();\n  const [data, setData] = useState({\n    question: null,\n    answers: null,\n    id: null,\n    double_points: false\n  });\n  const allData = [];\n  cats.forEach(cat => cat.forEach(card => allData.push(card)));\n  useEffect(() => {\n    const randomIndex = Math.floor(Math.random() * allData.length);\n    console.log(randomIndex);\n    const newData = allData.map((card, index) => ({\n      ...card,\n      double_points: index === randomIndex\n    }));\n    setData({\n      question: null,\n      answers: null,\n      id: null,\n      double_points: newData[randomIndex].double_points\n    });\n  }, []);\n  function handleQuesClick(event) {\n    const id = parseInt(event.currentTarget.id); // Convert id to integer\n    const question = allData[id - 1].question;\n    const answers = allData[id - 1].answers;\n    setData({\n      question: question,\n      answers: answers,\n      id: id,\n      double_points: data.double_points\n    });\n  }\n  function handleBackClick() {\n    setData({\n      question: null,\n      answers: null,\n      id: null,\n      double_points: false\n    });\n  }\n  const catMap = cats.map(cat => {\n    const cardMap = cat.map(card => /*#__PURE__*/_jsxDEV(Card, {\n      points: card.points * (card.double_points ? 2 : 1),\n      id: card.id,\n      double_points: card.double_points,\n      handleClick: handleQuesClick,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ques\",\n      children: cardMap\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ques-thingy\",\n      children: catMap\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), data.id && /*#__PURE__*/_jsxDEV(QuestionScreen, {\n      question: data.question,\n      answers: data.answers,\n      handleClick: handleBackClick,\n      id: data.id,\n      double_points: data.double_points\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n}\n_s2(Questions, \"ejdNrU+U1/Epc8OZjo005UubQSQ=\");\n_c3 = Questions;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"QuestionScreen\");\n$RefreshReg$(_c3, \"Questions\");","map":{"version":3,"names":["cats","useState","useRef","useEffect","Card","props","initStyle","clickedStyle","timesClicked","current","id","data","nestedHandleClick","e","handleClick","points","QuestionScreen","screenStyle","double_points","question","answers","map","answer","index","Questions","setData","allData","forEach","cat","card","push","randomIndex","Math","floor","random","length","console","log","newData","handleQuesClick","event","parseInt","currentTarget","handleBackClick","catMap","cardMap"],"sources":["/Users/alqattan/Downloads/Jeopardy-Clone-main/src/Questions.js"],"sourcesContent":["import cats from \"./cats.js\";\nimport { useState, useRef, useEffect } from \"react\";\n\nfunction Card(props) {\n    let initStyle = \"cardy-questions\";\n    let clickedStyle = \"cardy-questions-clicked\";\n\n    const timesClicked = useRef(0);\n\n    if (timesClicked.current !== 0 || props.id - props.data.id === 0) {\n        initStyle = clickedStyle;\n    }\n\n    const nestedHandleClick = (e) => {\n        timesClicked.current++;\n        props.handleClick(e);\n    };\n\n    return (\n        <div>\n            <div id={props.id} className={initStyle} onClick={nestedHandleClick}>\n                <h5 className=\"card-points\">{props.points}</h5>\n            </div>\n        </div>\n    );\n}\n\nfunction QuestionScreen(props) {\n    const screenStyle = props.double_points ? \"double-question-screen\" : \"question-screen\";\n\n    return (\n        <div className={screenStyle}>\n            <h5 className=\"question\">{props.question}</h5>\n            <ol className=\"answers\">\n                {props.answers.map((answer, index) => (\n                    <li key={index} type=\"a\">\n                        {answer}\n                    </li>\n                ))}\n            </ol>\n            <button className=\"back-button\" onClick={props.handleClick}>\n                Back\n            </button>\n        </div>\n    );\n}\n// function QuestionScreen(props) {\n//     console.log(props.id);\n//     return (\n//         <div className=\"question-screen\">\n//             <h5 className=\"question\">{props.question}</h5>\n//             {/* {props.id -2 === 0 && <img src=\"../q2.png\" alt=\"\" className=\"question-img\"/>} */}\n//             <ol className=\"answers\">\n//                 {props.answers.map((answer) => <li type=\"a\">{answer}</li>)} \n//             </ol>\n//             <button className=\"back-button\" onClick={props.handleClick}>Back</button>\n//         </div>\n//     );\n// }\n\nexport default function Questions() {\n    const [data, setData] = useState({ question: null, answers: null, id: null, double_points: false });\n    const allData = [];\n\n    cats.forEach((cat) => cat.forEach((card) => allData.push(card)));\n\n    useEffect(() => {\n        const randomIndex = Math.floor(Math.random() * allData.length);\n        console.log(randomIndex);\n        const newData = allData.map((card, index) => ({\n            ...card,\n            double_points: index === randomIndex,\n        }));\n        setData({ question: null, answers: null, id: null, double_points: newData[randomIndex].double_points });\n    }, []);\n\n    function handleQuesClick(event) {\n        const id = parseInt(event.currentTarget.id); // Convert id to integer\n        const question = allData[id - 1].question;\n        const answers = allData[id - 1].answers;\n        setData({ question: question, answers: answers, id: id, double_points: data.double_points });\n    }\n\n    function handleBackClick() {\n        setData({ question: null, answers: null, id: null, double_points: false });\n    }\n\n    const catMap = cats.map((cat) => {\n        const cardMap = cat.map((card) => (\n            <Card\n                points={card.points * (card.double_points ? 2 : 1)}\n                id={card.id}\n                double_points={card.double_points}\n                handleClick={handleQuesClick}\n                data={data}\n            />\n        ));\n        return <div className=\"ques\">{cardMap}</div>;\n    });\n\n    return (\n        <div className=\"questions\">\n            <div className=\"ques-thingy\">{catMap}</div>\n            {data.id && <QuestionScreen question={data.question} answers={data.answers} handleClick={handleBackClick} id={data.id} double_points={data.double_points} />}\n        </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}