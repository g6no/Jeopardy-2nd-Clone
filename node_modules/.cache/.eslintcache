[{"/Users/alqattan/Downloads/Jeopardy-Clone-main/src/index.js":"1","/Users/alqattan/Downloads/Jeopardy-Clone-main/src/App.js":"2","/Users/alqattan/Downloads/Jeopardy-Clone-main/src/Questions.js":"3","/Users/alqattan/Downloads/Jeopardy-Clone-main/src/Header.js":"4","/Users/alqattan/Downloads/Jeopardy-Clone-main/src/cats.js":"5"},{"size":212,"mtime":1670395861000,"results":"6","hashOfConfig":"7"},{"size":183,"mtime":1670395861000,"results":"8","hashOfConfig":"7"},{"size":4220,"mtime":1709676611223,"results":"9","hashOfConfig":"7"},{"size":558,"mtime":1709670017440,"results":"10","hashOfConfig":"7"},{"size":3690,"mtime":1709676621119,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ab8v9r",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alqattan/Downloads/Jeopardy-Clone-main/src/index.js",[],[],"/Users/alqattan/Downloads/Jeopardy-Clone-main/src/App.js",[],[],"/Users/alqattan/Downloads/Jeopardy-Clone-main/src/Questions.js",["28"],[],"import cats from \"./cats.js\";\nimport {useState ,useRef, useEffect} from \"react\";\n\n\nfunction Card(props) {   \n    let initStyle = \"cardy-questions\";\n    let clickedStyle = \"cardy-questions-clicked\";\n\n    const timesClicked = useRef(0)\n\n    if (timesClicked.current !== 0 || props.id-props.data.id === 0) {\n        initStyle = clickedStyle;\n    }\n\n    const nestedHandleClick = (e) => {\n        timesClicked.current++;\n        props.handleClick(e)\n    }\n    \n\n    return (\n        <div>\n            <div id={props.id} className= {initStyle}  onClick={e => {return nestedHandleClick(e)}}>\n                <h5 className=\"card-points\">{props.points}</h5>\n            </div>\n        </div>\n    );\n}\n\n// function QuestionScreen(props) {\n//     console.log(\"Id: \" + props.id)\n//     console.log(\"Double Points: \" + props.double_points)\n//     return (\n//         <div className=\"question-screen\">\n//             <h5 className=\"question\">{props.question}</h5>\n//             {props.id -2 === 0 && <img src=\"../q2.png\" alt=\"\" className=\"question-img\"/>}\n//             <ol className=\"answers\">\n//                 {props.answers.map((answer) => <li type=\"a\">{answer}</li>)} \n//             </ol>\n//             <button className=\"back-button\" onClick={props.handleClick}>Back</button>\n//         </div>\n//     );\n// }\n\nfunction QuestionScreen(props) {\n    const screenStyle = props.double_points ? \"double-question-screen\" : \"question-screen\";\n\n    return (\n        <div className={screenStyle}>\n            <h5 className=\"question\">{props.question}</h5>\n            {props.id === 7 && <img src=\"../Q7.png\" alt=\"\" className=\"resized-img\"/>}\n            {props.id === 8 && <img src=\"../Q8.png\" alt=\"\" className=\"resized-img\"/>}\n            {props.id === 12 && <img src=\"../Q12.png\" alt=\"\" className=\"resized-img\"/>}\n            {props.id === 17 && <img src=\"../Q17.png\" alt=\"\" className=\"resized-img\"/>}\n            {props.id === 19 && <img src=\"../Q19.png\" alt=\"\" className=\"resized-img\"/>}\n            <ol className=\"answers\">\n                {props.answers.map((answer, index) => (\n                    <li key={index} type=\"a\">\n                        {answer}\n                    </li>\n                ))}\n            </ol>\n            <button className=\"back-button\" onClick={props.handleClick}>\n                Back\n            </button>\n        </div>\n    );\n}\n\n\nexport default function Questions() {\n    const [data, setData] = useState({question: null, answers: null ,id: null, double_points: false})\n    const allData = []\n    cats.map((cat) => cat.map((card) => allData.push(card)));\n\n    useEffect(() => {\n        const randomIndex = Math.floor(Math.random() * allData.length);\n        console.log(randomIndex);\n        // Directly update double_points status within allData\n        allData[randomIndex-1].double_points = true;\n        // No need to create a new array or set state here if we're not displaying questions immediately\n    }, []);\n\n    function handleQuesClick(event) {\n        const id = parseInt(event.currentTarget.id, 10); // Ensure `id` is a number\n        const selectedCard = allData.find(card => card.id === id); // Find the clicked card by id\n        if (selectedCard) {\n            // Now `selectedCard.double_points` will accurately reflect the double points status\n            setData({ \n                question: selectedCard.question, \n                answers: selectedCard.answers, \n                id: id, \n                double_points: selectedCard.double_points \n            });\n        }\n    }\n    \n    function handleBackClick() {\n        setData({question: null, answers: null ,id: null})\n    }\n\n    const catMap = cats.map((cat) => {\n        const cardMap = cat.map((card) => <Card points={card.points} id={card.id} handleClick={handleQuesClick} data={data}/>);\n        return (\n            <div className=\"ques\">\n                {cardMap}\n            </div>\n        );\n    })\n\n\n    return (\n    <div className=\"questions\">\n        <div className=\"ques-thingy\">\n            {catMap}\n        </div>\n        {data.id && <QuestionScreen question={data.question} answers={data.answers} handleClick={handleBackClick} id={data.id} double_points = {data.double_points}/>}\n    </div>\n    )\n}","/Users/alqattan/Downloads/Jeopardy-Clone-main/src/Header.js",[],[],"/Users/alqattan/Downloads/Jeopardy-Clone-main/src/cats.js",[],[],{"ruleId":"29","severity":1,"message":"30","line":82,"column":8,"nodeType":"31","endLine":82,"endColumn":10,"suggestions":"32"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'allData'. Either include it or remove the dependency array.","ArrayExpression",["33"],{"desc":"34","fix":"35"},"Update the dependencies array to be: [allData]",{"range":"36","text":"37"},[2940,2942],"[allData]"]